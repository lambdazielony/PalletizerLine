FUNCTION_BLOCK "ConveyorCrossing"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      bx_PalletSensor : Bool;
      bx_EmptyPalletReq : Bool;
      bx_ReleasePalletReq : Bool;
      bx_TransportPalletReq : Bool;
      bx_PrevAck : Bool;
      bx_NextAck : Bool;
      ix_CurrentState : DInt;
   END_VAR

   VAR_OUTPUT 
      by_RollsFrd : Bool;
      by_RollsRev : Bool;
      by_ChainFrd : Bool;
      by_ChainRev : Bool;
      by_EmptyPalletAck : Bool;
      by_ReleasePalletAck : Bool;
      by_TransportPalletAck : Bool;
      by_PrevReq : Bool;
      by_NextReq : Bool;
      ModuleSts : "CPG_typePackML_ModuleSts";
      iy_SeqStep : Int;
   END_VAR

   VAR 
      i_SeqStep : Int;
   END_VAR


BEGIN
	CASE #ix_CurrentState OF
	    1://Clearing
	        #ModuleSts.sts_Clearing_SC := True;
	    2://Stopped
	        #ModuleSts.sts_Stopping_SC := False;
	        #ModuleSts.sts_Clearing_SC := False;
	    3://Starting
	        #ModuleSts.sts_Starting_SC := True;
	        #iy_SeqStep := #i_SeqStep;
	    4://Idle
	        #ModuleSts.sts_Resetting_SC := False;
	        #by_ChainFrd := False;
	        #by_ChainRev := False;
	        #by_RollsFrd := FALSE;
	        #by_RollsRev := False;
	        #by_NextReq := False;
	        #by_PrevReq := False;
	        #by_EmptyPalletAck := False;
	        #by_ReleasePalletAck := False;
	        #by_TransportPalletAck := False;
	        #i_SeqStep := 0;
	    5://Suspended
	        ;
	    6://Execute
	        #ModuleSts.sts_Starting_SC := False;
	        CASE #i_SeqStep OF
	            0://Wait req
	                IF #bx_EmptyPalletReq AND NOT #bx_TransportPalletReq THEN
	                    #i_SeqStep := 1;
	                ELSIF #bx_ReleasePalletReq AND NOT #bx_TransportPalletReq THEN
	                    #i_SeqStep := 4;
	                ELSIF #bx_TransportPalletReq THEN
	                    #i_SeqStep := 7;
	                END_IF;
	            1://Send the req to the prev module
	                #by_PrevReq := True;
	                IF #bx_PrevAck THEN
	                    #i_SeqStep := 2;
	                END_IF;
	            2://Start the rolls, wait the empty pallet arrive
	                #by_RollsFrd := True;
	                #by_RollsRev := False;
	                IF #bx_PalletSensor THEN
	                    #by_RollsFrd := False;
	                    #by_RollsRev := False;
	                    #by_PrevReq := False;
	                    #i_SeqStep := 3;
	                END_IF;
	            3://Start the chain conveyor, wait pallet leave
	                #by_EmptyPalletAck := True;
	                #by_ChainRev := True;
	                #by_ChainFrd := False;
	                IF NOT #bx_PalletSensor AND NOT #bx_EmptyPalletReq THEN
	                    #by_ChainRev := False;
	                    #by_ChainFrd := False;
	                    #i_SeqStep := 0;
	                END_IF;
	            4://Send ack to the palletizer, wait pallet arrive at the crossing
	                #by_ReleasePalletAck := True;
	                #by_ChainFrd := True;
	                #by_ChainRev := False;
	                IF #bx_PalletSensor THEN
	                    #by_ChainFrd := False;
	                    #by_ChainRev := False;
	                    #i_SeqStep := 5;
	                END_IF;
	            5://Send the req to the next module
	                #by_NextReq := True;
	                IF #bx_NextAck THEN
	                    #by_NextReq := False;
	                    #i_SeqStep := 6;
	                END_IF;
	            6://Start the rolls forward, wait the pallet leave
	                #by_RollsFrd := True;
	                #by_RollsRev := False;
	                IF NOT #bx_PalletSensor THEN
	                    #by_RollsFrd := False;
	                    #by_RollsRev := False;
	                    #i_SeqStep := 0;
	                END_IF;
	            7://Send ack and wait for the pallet 
	                #by_TransportPalletAck := True;
	                #by_RollsFrd := True;
	                #by_RollsRev := False;
	                IF #bx_PalletSensor THEN
	                    #i_SeqStep := 8;
	                END_IF;
	            8://Wait the pallet leaves
	                IF NOT #bx_PalletSensor THEN
	                    #by_RollsFrd := False;
	                    #by_RollsRev := False;
	                    #by_TransportPalletAck := False;
	                    #i_SeqStep := 0;
	                END_IF;
	        END_CASE;
	        //#ModuleSts.sts_Execute_SC := True;
	    7://Stopping
	        #ModuleSts.sts_Stopping_SC := True;
	    8://Aborting
	        #ModuleSts.sts_Aborting_SC := True;
	    9://Aborted
	        #ModuleSts.sts_Aborting_SC := False;
	    10://Holding
	        #ModuleSts.sts_Holding_SC := True;
	    11://Held
	        ;
	    12://Unholding
	        ;
	    13://Suspending
	        ;
	    14://Unsuspending
	        ;
	    15://Resetting
	        #ModuleSts.cmd_Reset := False;
	        #ModuleSts.sts_Resetting_SC := True;
	    16://Completing
	        #ModuleSts.sts_Execute_SC := False;
	        #ModuleSts.sts_Completing_SC := True;
	    17://Complete
	        #ModuleSts.sts_Completing_SC := False;
	END_CASE;
	#iy_SeqStep := #i_SeqStep;
END_FUNCTION_BLOCK

