FUNCTION_BLOCK "Palletizer"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      bx_BoxSensor : Bool;
      bx_PalletSensor1 : Bool;
      bx_PalletSensor2 : Bool;
      bx_PusherInPos : Bool;
      bx_TrapdoorInPos : Bool;
      bx_PositionerExtended : Bool;
      bx_LiftMoving : Bool;
      bx_BoxReady : Bool;
      bx_PalletReady : Bool;
      bx_ReleasePalletAck : Bool;
      NUMBER_OF_LAYERS : Int;
      ix_CurrentState : DInt;
   END_VAR

   VAR_OUTPUT 
      by_BeltFrd : Bool;
      by_BeltRev : Bool;
      by_Pusher : Bool;
      by_Positioner : Bool;
      by_Trapdoor : Bool;
      by_MoveLiftToLimit : Bool;
      by_LiftUp : Bool;
      by_LiftDown : Bool;
      by_ChainFrd : Bool;
      by_ChainRev : Bool;
      by_BoxReq : Bool;
      by_PalletReq : Bool;
      by_ReleasePalletReq : Bool;
      ModuleSts : "CPG_typePackML_ModuleSts";
      iy_SeqStep : Int;
      iy_RowCounter : Int;
   END_VAR

   VAR 
      i_SeqStep : Int;
      i_RowCounter : Int;
      i_ColumnsCounter : Int;
      i_LayersCounter : Int;
      instBoxSensorFTrig {InstructionName := 'F_TRIG'; LibVersion := '1.0'} : F_TRIG;
      instFullRowOfBoxesTimeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      instLiftUpTimeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      instPusherTimeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      instOpenTrapdoorTimeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      instLiftDownTimeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
   END_VAR


BEGIN
	//----------------------------------------------------------------------------------------
	// Change log table:
	// Version       Date               Expert in charge    Changes applied
	// 1.00          12.03.2022         SGorski             Initial instance of the module
	// 1.01          14.03.2022         SGorski             
	//----------------------------------------------------------------------------------------
	
	//Falling trigger sensor detection 
	//#instBoxSensorFTrig(CLK := #bx_BoxSensor);
	
	
	//Full row of boxes detection timeout
	#instFullRowOfBoxesTimeout(IN := #i_RowCounter >= 2,
	                           PT := T#1000ms);
	
	#instLiftUpTimeout(IN:=(#i_SeqStep = 4 AND #by_LiftUp)
	                   OR (#i_SeqStep = 14 AND #by_LiftDown),
	                   PT:=T#3s);
	
	#instPusherTimeout(IN := #i_SeqStep = 7 AND #by_Pusher,
	                   PT := T#3s);
	
	#instOpenTrapdoorTimeout(IN := (#i_SeqStep = 11 AND #by_Trapdoor)
	                         OR (#i_SeqStep = 13 AND NOT #by_Trapdoor),
	                         PT := T#3s);
	
	#instLiftDownTimeout(IN := #i_SeqStep = 12 AND #by_LiftDown,
	                     PT := T#3s);
	
	
	
	//Row box counter
	IF #instBoxSensorFTrig.Q OR #bx_BoxSensor THEN
	    #i_RowCounter := #i_RowCounter + 1;
	END_IF;
	
	CASE #ix_CurrentState OF
	    1://Clearing
	        #ModuleSts.sts_Clearing_SC := True;
	    2://Stopped
	        #ModuleSts.sts_Stopping_SC := False;
	        #ModuleSts.sts_Clearing_SC := False;
	    3://Starting
	        #ModuleSts.sts_Starting_SC := True;
	        #iy_SeqStep := #i_SeqStep;
	    4://Idle
	        #ModuleSts.sts_Resetting_SC := False;
	        #i_SeqStep := 0;
	        #by_BeltFrd := false;
	        #by_BeltRev := False;
	        #by_ChainFrd := False;
	        #by_ChainRev := False;
	        #by_LiftDown := False;
	        #by_LiftUp := False;
	        #by_MoveLiftToLimit := False;
	        #by_Pusher := False;
	        #by_Positioner := False;
	        #by_BoxReq := False;
	        #by_PalletReq := False;
	        #by_ReleasePalletReq := False;
	        #i_RowCounter := 0;
	        #i_ColumnsCounter := 0;
	        #i_LayersCounter := 0;
	        
	    5://Suspended
	        ;
	    6://Execute
	        #ModuleSts.sts_Starting_SC := False;
	        CASE #i_SeqStep OF
	            0://Check if there is a pallet on the chain conveyor   
	                IF #bx_PalletSensor2 THEN
	                    #i_SeqStep := 4;
	                ELSE
	                    #i_SeqStep := 1;
	                END_IF;
	            1://Set the lift fully down
	                #by_MoveLiftToLimit := True;
	                #by_LiftDown := True;
	                #by_LiftUp := False;
	                IF NOT #bx_LiftMoving AND #by_LiftDown AND NOT #by_LiftUp THEN
	                    #by_MoveLiftToLimit := False;
	                    #by_LiftDown := False;
	                    #by_LiftUp := False;
	                    #i_SeqStep := 2;
	                END_IF;
	            2://Request a new pallet
	                #by_PalletReq := True;
	                IF #bx_PalletReady THEN
	                    #i_SeqStep := 3;
	                END_IF;
	            3://Start the chain conveyor, wait the pallet arrive
	                #by_ChainFrd := False;
	                #by_ChainRev := True;
	                IF #bx_PalletSensor2 THEN
	                    #by_PalletReq := False;
	                    #by_ChainFrd := False;
	                    #by_ChainRev := False;
	                    #i_SeqStep := 4;
	                END_IF;
	            4://Set the lift fully up
	                #by_MoveLiftToLimit := True;
	                #by_LiftDown := False;
	                #by_LiftUp := True;
	                IF NOT #bx_LiftMoving AND NOT #by_LiftDown AND #by_LiftUp AND #instLiftUpTimeout.Q THEN
	                    #by_MoveLiftToLimit := False;
	                    #by_LiftDown := False;
	                    #by_LiftUp := False;
	                    #i_SeqStep := 5;
	                END_IF;
	            5://Request a new set of boxes
	                #by_BoxReq := True;
	                IF #bx_BoxReady THEN
	                    #by_BeltFrd := True;
	                    #by_BeltRev := False;
	                    #i_SeqStep := 6;
	                END_IF;
	            6://Wait the all of the boxes arrive
	                IF #instFullRowOfBoxesTimeout.Q THEN
	                    #by_BoxReq := False;
	                    #i_SeqStep := 7;
	                END_IF;
	            7://Push the boxes onto the trapdoor
	                #by_BeltFrd := False;
	                #by_BeltRev := False;
	                #by_Pusher := True;
	                IF #bx_PusherInPos AND #by_Pusher AND #instPusherTimeout.Q THEN
	                    #i_SeqStep := 8;
	                END_IF;
	            8://Rectact the pusher and reset the counter
	                #by_Pusher := False;
	                IF #bx_PusherInPos AND NOT #by_Pusher THEN
	                    #i_RowCounter := 0;
	                    #i_ColumnsCounter := #i_ColumnsCounter + 1;
	                    IF #i_ColumnsCounter >= 3 THEN
	                        #i_SeqStep := 9;
	                    ELSE
	                        #i_SeqStep := 5;
	                    END_IF;
	                END_IF;
	            9://Position the boxes on the trapdoor
	                #by_Positioner := True;
	                IF #bx_PositionerExtended THEN
	                    #i_SeqStep := 10;
	                END_IF;
	            10://Retract the positioner
	                
	                //IF NOT #bx_PositionerExtended THEN
	                    #i_SeqStep := 11;
	               // END_IF;
	            11://Open the trapdoor
	                #by_Trapdoor := True;
	                IF #bx_TrapdoorInPos AND #by_Trapdoor AND #instOpenTrapdoorTimeout.Q THEN
	                    #i_SeqStep := 12;
	                END_IF;
	            12://Move the lift down one layer
	                #by_MoveLiftToLimit := False;
	                #by_LiftDown := True;
	                #by_LiftUp := False;
	                #by_Positioner := False;
	                IF NOT #bx_LiftMoving AND #by_LiftDown AND NOT #by_LiftUp AND #instLiftDownTimeout.Q THEN
	                    #i_SeqStep := 13;
	                END_IF;
	            13://Close the trapdoor
	                #by_LiftDown := False;
	                #by_LiftUp := False;
	                #by_Trapdoor := False;
	                IF #bx_TrapdoorInPos AND NOT #by_Trapdoor AND #instOpenTrapdoorTimeout.Q THEN
	                    #i_ColumnsCounter := 0;
	                    #i_LayersCounter := #i_LayersCounter + 1;
	                    IF #i_LayersCounter >= #NUMBER_OF_LAYERS THEN
	                        #i_SeqStep := 14;
	                    ELSE
	                        #i_SeqStep := 5;
	                    END_IF;
	                END_IF;
	            14://Move the lift fully down 
	                #by_MoveLiftToLimit := True;
	                #by_LiftDown := True;
	                #by_LiftUp := False;
	                IF NOT #bx_LiftMoving AND #by_LiftDown AND NOT #by_LiftUp AND #instLiftUpTimeout.Q THEN
	                    #by_MoveLiftToLimit := False;
	                    #by_LiftDown := False;
	                    #by_LiftUp := False;
	                    #i_SeqStep := 15;
	                END_IF;
	            15://Request the release of the pallet 
	                #by_ReleasePalletReq := True;
	                IF #bx_ReleasePalletAck THEN
	                    #i_SeqStep := 16;
	                END_IF;
	            16://Move the chain forward
	                #by_ChainFrd := True;
	                #by_ChainRev := False;
	                IF NOT #bx_PalletSensor1 AND NOT #bx_PalletSensor2 THEN
	                    #by_ChainFrd := FALSE;
	                    #by_ChainRev := False;
	                    #by_ReleasePalletReq := False;
	                    #i_SeqStep := 0;
	                END_IF;
	        END_CASE;
	        //#ModuleSts.sts_Execute_SC := True;
	    7://Stopping
	        #ModuleSts.sts_Stopping_SC := True;
	    8://Aborting
	        #ModuleSts.sts_Aborting_SC := True;
	    9://Aborted
	        #ModuleSts.sts_Aborting_SC := False;
	    10://Holding
	        #ModuleSts.sts_Holding_SC := True;
	    11://Held
	        ;
	    12://Unholding
	        ;
	    13://Suspending
	        ;
	    14://Unsuspending
	        ;
	    15://Resetting
	        #ModuleSts.cmd_Reset := False;
	        #ModuleSts.sts_Resetting_SC := True;
	    16://Completing
	        #ModuleSts.sts_Execute_SC := False;
	        #ModuleSts.sts_Completing_SC := True;
	    17://Complete
	        #ModuleSts.sts_Completing_SC := False;
	END_CASE;
	#iy_SeqStep := #i_SeqStep;
	#iy_RowCounter := #i_RowCounter; 
END_FUNCTION_BLOCK

