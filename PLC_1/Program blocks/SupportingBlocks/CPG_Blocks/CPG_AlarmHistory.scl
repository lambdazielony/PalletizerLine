FUNCTION_BLOCK "CPG_AlarmHistory"
TITLE = CPG_AlarmHistory
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'tech.team.motioncontrol@siemens.com'
FAMILY : CPG
VERSION : 1.1
//Support: tech.team.motioncontrol@siemens.com
   VAR_OUTPUT 
      alarmHistoryArraySize : Int;   // Size of Alarm History - number of alarm array elements
   END_VAR

   VAR_IN_OUT 
      inStopReasonAlarm : "CPG_typeEvent";   // Input - Stop Reason Alarm (structure)
      stsAlarmHistory : Array[0.."CPG_NO_OF_ADMIN_EVENTS_HISTORY_UPPER_LIM"] of "CPG_typeEvent";   // Status- Alarm History Log
   END_VAR

   VAR 
      statAlarmArraySize { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Max # of Events in the Alarm History Array
      statTriggerOsPos { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Trigger One Shot - positive edge
      statTriggerOsNeg { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Trigger One Shot - negative edge
      statErrorRtc { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Error code for reading of Real Time Clock
      statEventCurDateTime {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;   // temp value for current date & time
      statFirstScan { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // 0=1st scan of FB; set to 1 after 1st FB scan...
   END_VAR

   VAR_TEMP 
      tempIndex : Int;   // temp index value
   END_VAR

   VAR CONSTANT 
      ZERO : Int := 0;   // constant = 0
      NEGATIVE_ONE : Int := -1;   // constant = -1
   END_VAR


BEGIN
	//============================================================================================================
	// SIEMENS AG
	// (c)Copyright 2018 All Rights Reserved
	//------------------------------------------------------------------------------------------------------------
	// Project: CPG Template
	// Tested with: S7-1500 with FW version V2.1
	// Engineering: TIA Portal V14
	// Restrictions: ---
	// Requirements: S7-1500
	// Functionality: used to capture the current Stop ReasonAlarm (i.e. 'Machine)
	//                First Fault to the "PackTags" AlarmHistory log.
	// Support: tech.team.motioncontrol@siemens.com
	//------------------------------------------------------------------------------------------------------------
	// Change log table:
	// Version       Date               Expert in charge    Changes applied
	//  01.00.00     01.01.2018         MP                  Initial Release & PackML V1.5  Renamed CPG V1.0
	//  01.01.00     22.05.2018         JP                  Adopted to styleguide
	//  01.01.01     01.05.2020         KB                  Changed RD_SYS_T -> RD_LOC_T
	//============================================================================================================
	// Function : CPG_AlarmHistory
	//============================================================================================================
	
	// First Scan Logic
	IF #statFirstScan = FALSE THEN
	  "CPG_ArrayLength"(arrayToBeSized := #stsAlarmHistory,
	                    arraySize => #statAlarmArraySize);
	
	  // Update number of array elements in Alarm History Array (used for Admin.AlarmHistoryExtent)
	  #alarmHistoryArraySize := #statAlarmArraySize;
	
	  #statFirstScan := TRUE;      // Set the FB 1st Scan Bit
	END_IF;
	
	// Positive Trigger
	IF #inStopReasonAlarm.Trigger = TRUE AND #statTriggerOsPos = FALSE THEN
	  // execute code for new incoming event
	  #statTriggerOsPos := TRUE;   // Set the One Shot Bit 
	
	  // Index the existing Alarm History Array (FIFO).
	  FOR #tempIndex := #statAlarmArraySize - 1 TO 1 BY -1 DO
	    #stsAlarmHistory[#tempIndex] := #stsAlarmHistory[#tempIndex - 1];
	  END_FOR;
	
	  // Update the Array[0] with the current alarm information
	  #stsAlarmHistory[0] := #inStopReasonAlarm;
	END_IF;
	
	IF #inStopReasonAlarm.Trigger = FALSE AND #statTriggerOsPos = TRUE THEN
	  // Reset the One Shot Bit
	  #statTriggerOsPos := FALSE;  // Reset the One Shot Bit
	END_IF;
	
	// Negative Trigger
	IF #inStopReasonAlarm.Trigger = FALSE AND #statTriggerOsNeg = FALSE THEN
	  // Execute code for new incoming event
	  #statTriggerOsNeg := TRUE;    // Set the One Shot Bit
	  // Capture the Alarm Ack. Time
	  #statErrorRtc := RD_LOC_T(#statEventCurDateTime);     // Read the Real Time Clock
	  #stsAlarmHistory[0].AckDateTimeDTL := #statEventCurDateTime; // Update acknowledge time
	END_IF;
	
	IF #inStopReasonAlarm.Trigger = TRUE AND #statTriggerOsPos = TRUE THEN
	  // Reset the One Shot Bit
	  #statTriggerOsNeg := FALSE;   // Reset the One Shot Bit
	END_IF;
	
	//  -------------- END OF LOGIC -------------------------
	ENO := TRUE;   // Set the ENO output
END_FUNCTION_BLOCK

