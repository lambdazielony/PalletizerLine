FUNCTION_BLOCK "CPG_EventManager"
TITLE = CPG_EventManager
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'tech.team.motioncontrol@siemens.com'
FAMILY : CPG
VERSION : 1.0
//Support: tech.team.motioncontrol@siemens.com
   VAR_INPUT 
      Cmd_Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Reset Command
      Cmd_ClearFirstOutEvents { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Command to clear First Out events
      firstScanBit { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Bit used to tell logic that this is the first scan of PLC
      Cfg_MessagePrefix { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "CPG_typeMessagePrefix";   // Message Prefix value for event messages multi-lingual
      Cfg_LanguageSelection { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Current Langage: 0=EN, 1=DE, 2=SP/ES, 3=IT, 4=FR
   END_VAR

   VAR_OUTPUT 
      Sts_Category_0_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 0
      Sts_Category_1_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 1
      Sts_Category_2_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 2
      Sts_Category_3_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 3
      Sts_Category_4_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 4
      Sts_Category_5_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 5
      Sts_Category_6_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 6
      Sts_Category_7_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 7
      Sts_Category_8_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 8
      Sts_Category_9_Latched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Category Status (on until reset cmd) - CAT 9
      Sts_Category_0_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 0
      Sts_Category_1_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 1
      Sts_Category_2_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 2
      Sts_Category_3_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 3
      Sts_Category_4_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 4
      Sts_Category_5_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 5
      Sts_Category_6_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 6
      Sts_Category_7_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 7
      Sts_Category_8_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 8
      Sts_Category_9_NotLatched { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Bool;   // Event Cat Status, not latched (=active event status) - CAT 9
      Sts_NumEvents { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Number of event in the In_EventStatus list
      Sts_CurrentActiveEvent { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // Status - TRUE = if any active events
      Sts_Error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;   // FB Error exist
      Sts_ErrorCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;   // FB Error code
   END_VAR

   VAR_IN_OUT 
      In_EventStatus : "CPG_typeEventStatus";   // Working event list data section
   END_VAR

   VAR 
      statEventCategory { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      statIndexAllEvents { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statIndexClearActiveEvents { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statIndexClearFirstOut { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statNumEvents { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;   // Max # of Events
      statPrevCmdReset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statPrevNumEvents { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statPrevUpdateEventListID { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statUpdateEventList { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statCurrentErrorCode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statCurrentActiveEvent { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statZeroEvent { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "CPG_typeEvent";   // Null Event
   END_VAR


BEGIN
	//============================================================================================================
	// SIEMENS AG
	// (c)Copyright 2018 All Rights Reserved
	//------------------------------------------------------------------------------------------------------------
	// Project: CPG Template
	// Tested with: S7-1500 with FW version V2.1
	// Engineering: TIA Portal V14
	// Restrictions: ---
	// Requirements: S7-1500
	// Functionality: Control EventManager function
	// Support: tech.team.motioncontrol@siemens.com
	//------------------------------------------------------------------------------------------------------------
	// Change log table:
	// Version       Date               Expert in charge    Changes applied
	//  01.00.00     01.01.2018         MP                  Initial Release & PackML V1.8  Renamed CPG V1.0
	//  01.01.00     22.05.2018         JP                  Adopted to styleguide
	//============================================================================================================
	// Function : CPG_EventManager
	//============================================================================================================
	
	// First Scan Logic Logic (only run through on 1st scan of PLC)
	IF #firstScanBit THEN                                                                   // Only run first scan
	  #In_EventStatus.wrk_ResetID := #In_EventStatus.wrk_ResetID + 1;                     // increment the Work Reset ID
	  #In_EventStatus.wrk_UpdateEventListID := #In_EventStatus.wrk_UpdateEventListID + 1; // increment the Work UpdateList ID
	  #In_EventStatus.sts_NumAllEvents := 0;                                              // Reset the number of all events value
	  
	  // Determine the Number of Sts_Events for given alarm/warning area
	  "CPG_ArrayLength"(arrayToBeSized := #In_EventStatus.sts_Events,
	                    arraySize => #In_EventStatus.wrk_EventArraySize);
	  RETURN;     // Exit the FB call
	END_IF;         // End the first scan section
	
	
	//---------------------------------------------------------------------------------
	// Main Logic Section
	
	// Update the message prefix for the current language
	IF #Cfg_LanguageSelection >= 0 AND #Cfg_LanguageSelection <= "LPMLV30_LANGUAGES_UPPER_LIM" THEN
	  #In_EventStatus.wrk_MessagePrefix := #Cfg_MessagePrefix.messagePrefix[#Cfg_LanguageSelection];
	END_IF;
	#In_EventStatus.wrk_LanguageSelection := #Cfg_LanguageSelection;
	
	// Upon a reset command, reset the latched status bits and clear the event list
	IF #Cmd_Reset THEN
	  #In_EventStatus.sts_Category_0_Latched := FALSE;
	  #In_EventStatus.sts_Category_1_Latched := FALSE;
	  #In_EventStatus.sts_Category_2_Latched := FALSE;
	  #In_EventStatus.sts_Category_3_Latched := FALSE;
	  #In_EventStatus.sts_Category_4_Latched := FALSE;
	  #In_EventStatus.sts_Category_5_Latched := FALSE;
	  #In_EventStatus.sts_Category_6_Latched := FALSE;
	  #In_EventStatus.sts_Category_7_Latched := FALSE;
	  #In_EventStatus.sts_Category_8_Latched := FALSE;
	  #In_EventStatus.sts_Category_9_Latched := FALSE;
	  
	  IF NOT (#statPrevCmdReset) THEN                             // Clear the zero event
	    #In_EventStatus.out_ZeroEvent := #statZeroEvent;
	    // String seperation variable not added.
	  END_IF;
	END_IF;                      // End IF Cmd_Reset.... 
	
	
	// Clear first out events - for alarms, this is typically done once the machine starts    
	IF #Cmd_ClearFirstOutEvents AND NOT (#statCurrentActiveEvent) THEN
	  #In_EventStatus.sts_FirstOutEvent := #In_EventStatus.out_ZeroEvent;
	  
	  FOR #statIndexClearFirstOut := 0 TO 9 BY 1 DO
	    #In_EventStatus.sts_FirstOutEventCat[#statIndexClearFirstOut] := #In_EventStatus.out_ZeroEvent;
	  END_FOR;
	END_IF;
	
	// Determine the maximum number of event that can be stored in the array.
	// It is assumed that the input array size is equal to the output array size
	IF (#Cmd_Reset AND (NOT #statPrevCmdReset)) OR (#In_EventStatus.wrk_EventArraySize = 0) THEN
	  // Determine the Number of Sts_Events for given alarm/warning area
	  
	  "CPG_ArrayLength"(arrayToBeSized := #In_EventStatus.sts_Events,
	                    arraySize => #In_EventStatus.wrk_EventArraySize);
	END_IF;
	
	//Determine if the event list needs updating    
	IF #In_EventStatus.wrk_UpdateEventListID <> #statPrevUpdateEventListID THEN
	  #statPrevUpdateEventListID := #In_EventStatus.wrk_UpdateEventListID;
	  #statUpdateEventList := TRUE;
	END_IF;
	
	IF #statUpdateEventList THEN
	  #statUpdateEventList := FALSE;
	  // Update Event outputs and status
	  // First clear the not latched staus bits and total number of events.
	  // This instruction will find the events in the coming rungs
	  #statCurrentErrorCode := 0;
	  #Sts_NumEvents := #In_EventStatus.sts_NumAllEvents;
	  #statCurrentActiveEvent := FALSE;
	  #Sts_Category_0_NotLatched := FALSE;
	  #Sts_Category_1_NotLatched := FALSE;
	  #Sts_Category_2_NotLatched := FALSE;
	  #Sts_Category_3_NotLatched := FALSE;
	  #Sts_Category_4_NotLatched := FALSE;
	  #Sts_Category_5_NotLatched := FALSE;
	  #Sts_Category_6_NotLatched := FALSE;
	  #Sts_Category_7_NotLatched := FALSE;
	  #Sts_Category_8_NotLatched := FALSE;
	  #Sts_Category_9_NotLatched := FALSE;
	  
	  //Determine if the number of events is greater than the max array size        
	  //if so, then report error
	  #statNumEvents := #In_EventStatus.sts_NumAllEvents;
	  IF #statNumEvents > #In_EventStatus.wrk_EventArraySize THEN
	    #statNumEvents := #In_EventStatus.wrk_EventArraySize;
	    IF (#statCurrentErrorCode = 0) THEN                   // Update status error code
	      #statCurrentErrorCode := 1;
	    END_IF;
	  END_IF;
	  #In_EventStatus.sts_NumEvents := #statNumEvents;
	  
	  //Go through the event array to capture first fault event and perform string management        
	  #statIndexAllEvents := 0;
	  FOR #statIndexAllEvents := 0 TO #statNumEvents - 1 DO
	    // Check to see if any event is currently still active
	    IF (#In_EventStatus.sts_Events[#statIndexAllEvents].Trigger) THEN
	      #statCurrentActiveEvent := TRUE;
	    END_IF;
	    
	    //Store event category for logic later in code
	    IF (#In_EventStatus.sts_Events[#statIndexAllEvents].Category >= 0) AND (#In_EventStatus.sts_Events[#statIndexAllEvents].Category <= 9) THEN
	      #statEventCategory := #In_EventStatus.sts_Events[#statIndexAllEvents].Category;
	    ELSE
	      #statEventCategory := 0;
	      IF (#statCurrentErrorCode = 0) THEN                   // Update status error code
	        #statCurrentErrorCode := 2;
	      END_IF;         // end "IF (Sts_ErrorCode=0)"
	    END_IF;             // end "IF (In_EventStatus.Sts_Events[Inde..."    
	    
	    // Set the First Out Event
	    IF NOT (#In_EventStatus.sts_FirstOutEvent.Trigger) THEN
	      #In_EventStatus.sts_FirstOutEvent := #In_EventStatus.sts_Events[#statIndexAllEvents];
	      #In_EventStatus.sts_FirstOutEvent.Trigger := TRUE;
	    END_IF;
	    
	    // Set the First Out Events by category
	    IF NOT (#In_EventStatus.sts_FirstOutEventCat[#statEventCategory].Trigger) THEN
	      #In_EventStatus.sts_FirstOutEventCat[#statEventCategory] := #In_EventStatus.sts_Events[#statIndexAllEvents];
	      #In_EventStatus.sts_FirstOutEventCat[#statEventCategory].Trigger := TRUE;
	    END_IF;
	    
	    //Category Event Status            
	    CASE DINT_TO_INT(#In_EventStatus.sts_Events[#statIndexAllEvents].Category) OF
	      0:
	        #Sts_Category_0_NotLatched := #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger;
	      1:
	        #Sts_Category_1_NotLatched := (#Sts_Category_1_NotLatched OR #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger);
	      2:
	        #Sts_Category_2_NotLatched := (#Sts_Category_2_NotLatched OR #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger);
	      3:
	        #Sts_Category_3_NotLatched := (#Sts_Category_3_NotLatched OR #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger);
	      4:
	        #Sts_Category_4_NotLatched := (#Sts_Category_4_NotLatched OR #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger);
	      5:
	        #Sts_Category_5_NotLatched := (#Sts_Category_5_NotLatched OR #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger);
	      6:
	        #Sts_Category_6_NotLatched := (#Sts_Category_6_NotLatched OR #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger);
	      7:
	        #Sts_Category_7_NotLatched := (#Sts_Category_7_NotLatched OR #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger);
	      8:
	        #Sts_Category_8_NotLatched := (#Sts_Category_8_NotLatched OR #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger);
	      9:
	        #Sts_Category_9_NotLatched := (#Sts_Category_9_NotLatched OR #In_EventStatus.sts_Events[#statIndexAllEvents].Trigger);
	    END_CASE;  // End of DINT_TO_INT(In_EventStatus.sts_events[Ind....
	    
	    
	  END_FOR;
	  
	  // set the status bits
	  #Sts_Category_0_Latched := #In_EventStatus.sts_Category_0_Latched;
	  #Sts_Category_1_Latched := #In_EventStatus.sts_Category_1_Latched;
	  #Sts_Category_2_Latched := #In_EventStatus.sts_Category_2_Latched;
	  #Sts_Category_3_Latched := #In_EventStatus.sts_Category_3_Latched;
	  #Sts_Category_4_Latched := #In_EventStatus.sts_Category_4_Latched;
	  #Sts_Category_5_Latched := #In_EventStatus.sts_Category_5_Latched;
	  #Sts_Category_6_Latched := #In_EventStatus.sts_Category_6_Latched;
	  #Sts_Category_7_Latched := #In_EventStatus.sts_Category_7_Latched;
	  #Sts_Category_8_Latched := #In_EventStatus.sts_Category_8_Latched;
	  #Sts_Category_9_Latched := #In_EventStatus.sts_Category_9_Latched;
	  
	  #In_EventStatus.sts_Category_0_NotLatched := #Sts_Category_0_NotLatched;
	  #In_EventStatus.sts_Category_1_NotLatched := #Sts_Category_1_NotLatched;
	  #In_EventStatus.sts_Category_2_NotLatched := #Sts_Category_2_NotLatched;
	  #In_EventStatus.sts_Category_3_NotLatched := #Sts_Category_3_NotLatched;
	  #In_EventStatus.sts_Category_4_NotLatched := #Sts_Category_4_NotLatched;
	  #In_EventStatus.sts_Category_5_NotLatched := #Sts_Category_5_NotLatched;
	  #In_EventStatus.sts_Category_6_NotLatched := #Sts_Category_6_NotLatched;
	  #In_EventStatus.sts_Category_7_NotLatched := #Sts_Category_7_NotLatched;
	  #In_EventStatus.sts_Category_8_NotLatched := #Sts_Category_8_NotLatched;
	  #In_EventStatus.sts_Category_9_NotLatched := #Sts_Category_9_NotLatched;
	  
	  #In_EventStatus.sts_CurrentActiveEvent := #statCurrentActiveEvent;
	END_IF;
	
	// Clear the remaining inactive bits    
	IF #statPrevNumEvents > #In_EventStatus.sts_NumEvents THEN
	  FOR #statIndexClearActiveEvents := #In_EventStatus.sts_NumEvents TO #statPrevNumEvents - 1 DO
	    #In_EventStatus.sts_Events[#statIndexClearActiveEvents] := #In_EventStatus.out_ZeroEvent;
	  END_FOR;
	END_IF;
	
	// Clear the number of input events in the case where some control module events are not being actively scanned.    
	IF #Cmd_Reset AND ((#In_EventStatus.sts_CurrentActiveEvent) OR (#In_EventStatus.sts_NumEvents > 0) OR (NOT #statPrevCmdReset)) THEN
	  #In_EventStatus.wrk_ResetID := #In_EventStatus.wrk_ResetID + 1;
	  #In_EventStatus.wrk_UpdateEventListID := #In_EventStatus.wrk_UpdateEventListID + 1;
	  #In_EventStatus.sts_NumAllEvents := 0;
	END_IF;
	
	#statPrevNumEvents := #In_EventStatus.sts_NumEvents;
	#statPrevCmdReset := #Cmd_Reset;
	
	//Write outputs
	#Sts_ErrorCode := #statCurrentErrorCode;
	#Sts_Error := (#statCurrentErrorCode <> 0);
	#Sts_CurrentActiveEvent := #statCurrentActiveEvent;
	
	//-----------------------------------------------------
	ENO := TRUE;   // Set the ENO output
	
END_FUNCTION_BLOCK

